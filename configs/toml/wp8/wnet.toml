[summary]
    # name of this experiment
    name = 'w8_wnet'
    author = 'Zhihua Liang'
    discription = 'Defect detection for POL 2020'
    # root directory of the project (for saveing logs, models, temp files, etc...)
    project_root = '/home/zhihua/data/work_space'    
[deepspace]
    # root directory of the dataset
    dataset_root = '/home/zhihua/data/anomaly/wp8/cy18_png'
    # CAD object path
    mesh_file_path = '/home/zhihua/data/mesh/common/bunny/bunny_watertight.stl'
    # agent name
    agent = 'deepspace.agents.gan.wnet.WNet'
    # which device to use, can be 'gpu', 'tpu', or 'cpu'
    device = 'gpu'
    # retry times to break the object
    gpu_device = 0
    # random seed
    seed = 999

    # model parameters
    InputCh=3
    ScaleRatio = 2
    ConvSize = 3
    pad = 1 #(ConvSize - 1) / 2 
    MaxLv = 5
    #data configure
    pascal = "../VOC2012/JPEGImages"
    bsds = "../BSR/BSDS500/data/images/"
    imagelist = "ImageSets/Segmentation/train.txt"
    BatchSize = 6
    Shuffle = true
    LoadThread = 4
    inputsize = [224,224]
    #partition configure
    K = 64
    #training configure
    init_lr = 0.05
    lr_decay = 0.1
    lr_decay_iter = 1000
    max_iter = 50000
    cuda_dev = 0 
    cuda_dev_list = "0,1"
    check_iter = 1000
    #Ncuts Loss configure
    radius = 4
    sigmaI = 10
    sigmaX = 4
    #testing configure
    model_tested = "./checkpoint_8_23_13_0_epoch_2000"


    # Learning rate, can be a float number like 0.001 or a list, like [0.1, 0.001, 1e-6]
    learning_rate = 1e-4
    # betas for Adam optimizer
    betas = [0.9, 0.999]
    # eps for Adam optimizer
    eps = 1e-8
    # momentum for Adam optimizer
    momentum = 0.99
    # weight decay
    weight_decay = 1e-5
    
    # max epoches to for training.
    max_epoch = 300
    
    # save model every x steps
    save_model_step = 10
    # checkpoint file name
    checkpoint_file = 'checkpoint.pth.tar'
    # workers for dataloader
    data_loader_workers = 8
    # data resolution
    image_resolution = [512, 512]
    # channels
    image_channels = 1
    # output format; png or tif
    data_format = 'png'
    # data mode, 'image', 'numpy', 'tfrecord'... or anything when there exist corresponding dataloader
    data_mode = 'image'
    # mode = 'train', 'test', 'validate', 'metrics'
    mode = 'train'




